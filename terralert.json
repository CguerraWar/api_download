{"version": "1.0", "files": [{"patch": "main.py", "content": "ZnJvbSBtYWNoaW5lIGltcG9ydCBQaW4sIHVuaXF1ZV9pZCwgVUFSVAppbXBvcnQgdGltZQppbXBvcnQgdWFzeW5jaW8KZnJvbSBzcmMubGlicy5TaW03NjAwRHJpdmVyIGltcG9ydCBTaW03NjAwRGlydmVyCmZyb20gc3JjLmxpYnMuT1RBX1Byb2dyYW1tZXIgaW1wb3J0IE90YVByb2dyYW1tZXIKCnRpbWUuc2xlZXAoMykKcHJpbnQoIkluaWNpbyBkZSBwcm9ncmFtYSBlbi4uLiIpCnRpbWUuc2xlZXAoMSkKCiNQYXJhIHF1ZSBvdGEgZnVuY2lvbmUgdGFudG8gbGEgdmVyc2lvbiBkZSBlbjogT3RhUHJvZ3JhbW1lcigpIC0+aW5pdCBjb21vIGxhIGRlIGVsIGdpdGh1YiBqc29uIGRlYmVuIGNvaW5jaWRpciBwYXJhIHEgbm8gc2UgZXN0ZSBldGVybmFtZW50ZSByZXByb2dyYW1hbmRvCm90YSA9IE90YVByb2dyYW1tZXIoMCwgMTE1MjAwLCAnMS4wJywgImh0dHBzOi8vY2d1ZXJyYXdhci5naXRodWIuaW8vYXBpX2Rvd25sb2FkL3RlcnJhbGVydC5qc29uIiApCgphc3luYyBkZWYgbWFpbigpOgoKICAgIHVhc3luY2lvLmNyZWF0ZV90YXNrKG90YS5UYXNrRm9ySXNOZWVkVG9Qcm9ncmFtKCkpICAjIEVzIHBvc2libGUgcXVlIHNlYSBtYW51YWwgbGEgdmVyaWZpY2FjaW9uIGRlIHZlcnNpb24sIGVuIHRhbCBjYXNvIGxsYW1hciBkaXJlY3RhbWVudGUgOiBhd2FpdCBUYXNrRm9ySXNOZWVkVG9Qcm9ncmFtKCkgY3VhbmRvIHNlIHJlcXVpZXJhCgogICAgd2hpbGUgIG90YS5Jc0dvb2RWZXJzaW9uKCkgPT0gRmFsc2U6CiAgICAgICAgcHJpbnQoJ0NvbWllbnpvIGEgY29ycmVyIG1pcyB0YXJlYXMgcHJpbmNpcGFsZXMgZGVzcHVlcyBxIHZlcmlmaXF1ZSBxdWUgbm8gbmVjZXNpdG8gcmVwcm9ncmFtYXIgbWkgdmVyc2lvbiBkZSBwcm9ncmFtYSAnKQogICAgICAgIAogICAgICAgIGF3YWl0IHVhc3luY2lvLnNsZWVwX21zKDUwMDApCiAgICAKICAgICN1YXN5bmNpby5jcmVhdGVfdGFzayhUYXNrX3h4eHh4eHh4KSB0YXJlYXMgIHByaW5jaXBhbGVzIHkgbG9vcCBhIGxhIGVzcGVyYQoKICAgIHdoaWxlIFRydWU6CiAgICAgIAogICAgICAgIHByaW50KCdNYWluIHByb2dyYW0uLi4uICcpCiAgICAKICAgICAgICBhd2FpdCB1YXN5bmNpby5zbGVlcF9tcyg1MDAwKQoKdWFzeW5jaW8ucnVuKG1haW4oKSkKCgojIGZyb20gbWFjaGluZSBpbXBvcnQgUGluLCB1bmlxdWVfaWQsIFVBUlQKIyB1YXJ0ID0gVUFSVCgwKSAgI21vZGVtCiMgdWFydC5pbml0KDExNTIwMCwgcnhidWY9MjAyNCwgdGltZW91dD0xMDAsIHRpbWVvdXRfY2hhcj01MCkKIyB1YXJ0LndyaXRlKCJBVCtIVFRQSU5JVFxyXG4iKQojIHVhcnQud3JpdGUoIkFUK0NHUEFERFJcclxuIikKIyB1cmw9ICJodHRwOi8vbXktanNvbi1zZXJ2ZXIudHlwaWNvZGUuY29tL0NndWVycmFXYXIvYXBpX2Rvd25sb2FkL2RiIgojIHVybD0gImh0dHA6Ly9hcGkud29ybGRiYW5rLm9yZy92Mi9lbi9pbmRpY2F0b3IvTlkuR0RQLk1LVFAuQ0Q/ZG93bmxvYWRmb3JtYXQ9Y3N2IgojIHVybD0gImh0dHBzOi8vY2d1ZXJyYXdhci5naXRodWIuaW8vYXBpX2Rvd25sb2FkL2RiLmpzb24iCiMgcGFyYW0gPSBmJz0iVVJMIiwie3VybH0iJwojIyMjIyMgcHJpbnQoZiJcclxuRWplY3V0YXIgQ29tYW5kbyBBVCtIVFRQUEFSQXtwYXJhbX0iKQojIHVhcnQud3JpdGUoZiJBVCtIVFRQUEFSQXtwYXJhbX1cclxuIikKIyB1YXJ0LndyaXRlKGYiQVQrSFRUUEFDVElPTj0wXHJcbiIpCiMgdWFydC53cml0ZSgiQVQrSFRUUEhFQURcclxuIikKIyB1YXJ0LndyaXRlKGYiQVQrSFRUUFJFQUQ9MCwyMDI0XHJcbiIpCiMgdWFydC53cml0ZSgiQVQrSFRUUFRFUk1cclxuIikKCiMgdWFydC5yZWFkKCk="}, {"patch": "src/libs/Util.py", "content": ""}]}