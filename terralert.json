{"version": "1.0", "files": [{"patch": "main.py", "content": "ZnJvbSBtYWNoaW5lIGltcG9ydCBQaW4sIHVuaXF1ZV9pZCwgVUFSVAppbXBvcnQgdGltZQppbXBvcnQgdWFzeW5jaW8KZnJvbSBzcmMubGlicy5TaW03NjAwRHJpdmVyIGltcG9ydCBTaW03NjAwRGlydmVyCmZyb20gc3JjLmxpYnMuT1RBX1Byb2dyYW1tZXIgaW1wb3J0IE90YVByb2dyYW1tZXIKCnRpbWUuc2xlZXAoMykKcHJpbnQoIkluaWNpbyBkZSBwcm9ncmFtYSBlbi4uLiIpCnRpbWUuc2xlZXAoMSkKCmVuZHBvaW50X3Byb2dyYW0gPSAiaHR0cHM6Ly9jZ3VlcnJhd2FyLmdpdGh1Yi5pby9hcGlfZG93bmxvYWQvdGVycmFsZXJ0Lmpzb24iCgojUGFyYSBxdWUgb3RhIGZ1bmNpb25lIHRhbnRvIGxhIHZlcnNpb24gZGUgZW46IE90YVByb2dyYW1tZXIoKSAtPmluaXQgY29tbyBsYSBkZSBlbCBnaXRodWIganNvbiBkZWJlbiBjb2luY2lkaXIgcGFyYSBxIG5vIHNlIGVzdGUgZXRlcm5hbWVudGUgcmVwcm9ncmFtYW5kbwpvdGEgPSBPdGFQcm9ncmFtbWVyKDAsIDExNTIwMCwgJzEuMCcsIGVuZHBvaW50X3Byb2dyYW0gKQoKbW9kZW03NjAwID0gU2ltNzYwMERpcnZlcigwLCAxMTUyMDApCgphc3luYyBkZWYgbWFpbigpOgoKICAgIHVhc3luY2lvLmNyZWF0ZV90YXNrKG90YS5UYXNrRm9ySXNOZWVkVG9Qcm9ncmFtKCkpICAjIEVzIHBvc2libGUgcXVlIHNlYSBtYW51YWwgbGEgdmVyaWZpY2FjaW9uIGRlIHZlcnNpb24sIGVuIHRhbCBjYXNvIGxsYW1hciBkaXJlY3RhbWVudGUgOiBhd2FpdCBUYXNrRm9ySXNOZWVkVG9Qcm9ncmFtKCkgY3VhbmRvIHNlIHJlcXVpZXJhCgogICAgd2hpbGUgIG90YS5Jc0dvb2RWZXJzaW9uKCkgPT0gRmFsc2U6CiAgICAgICAgcHJpbnQoJ0NvbWllbnpvIGEgY29ycmVyIG1pcyB0YXJlYXMgcHJpbmNpcGFsZXMgZGVzcHVlcyBxIHZlcmlmaXF1ZSBxdWUgbm8gbmVjZXNpdG8gcmVwcm9ncmFtYXIgbWkgdmVyc2lvbiBkZSBwcm9ncmFtYSAnKQogICAgICAgIAogICAgICAgIGF3YWl0IHVhc3luY2lvLnNsZWVwX21zKDUwMDApCiAgICAKICAgICN1YXN5bmNpby5jcmVhdGVfdGFzayhUYXNrX3h4eHh4eHh4KSB0YXJlYXMgIHByaW5jaXBhbGVzIHkgbG9vcCBhIGxhIGVzcGVyYQoKICAgIHdoaWxlIFRydWU6CiAgICAgIAogICAgICAgIHByaW50KCdNYWluIHByb2dyYW0uLi4uICcpCiAgICAgICAgIyBzdGF0dXNfY29kZSwgcmVzcG9uc2VfZGF0YSA9IGF3YWl0IG1vZGVtNzYwMC5odHRwX2dldChlbmRwb2ludF9wcm9ncmFtKQoKICAgICAgICAjIHByaW50KHN0YXR1c19jb2RlKQogICAgICAgICMgcHJpbnQocmVzcG9uc2VfZGF0YSkKICAgIAogICAgICAgIGF3YWl0IHVhc3luY2lvLnNsZWVwX21zKDUwMDApCgp1YXN5bmNpby5ydW4obWFpbigpKQoKCiMgZnJvbSBtYWNoaW5lIGltcG9ydCBQaW4sIHVuaXF1ZV9pZCwgVUFSVAojIHVhcnQgPSBVQVJUKDApICAjbW9kZW0KIyB1YXJ0LmluaXQoMTE1MjAwLCByeGJ1Zj0yMDI0LCB0aW1lb3V0PTEwMCwgdGltZW91dF9jaGFyPTUwKQojIHVhcnQud3JpdGUoIkFUK0hUVFBJTklUXHJcbiIpCiMgdWFydC53cml0ZSgiQVQrQ0dQQUREUlxyXG4iKQojIHVybD0gImh0dHA6Ly9teS1qc29uLXNlcnZlci50eXBpY29kZS5jb20vQ2d1ZXJyYVdhci9hcGlfZG93bmxvYWQvZGIiCiMgdXJsPSAiaHR0cDovL2FwaS53b3JsZGJhbmsub3JnL3YyL2VuL2luZGljYXRvci9OWS5HRFAuTUtUUC5DRD9kb3dubG9hZGZvcm1hdD1jc3YiCiMgdXJsPSAiaHR0cHM6Ly9jZ3VlcnJhd2FyLmdpdGh1Yi5pby9hcGlfZG93bmxvYWQvZGIuanNvbiIKIyBwYXJhbSA9IGYnPSJVUkwiLCJ7dXJsfSInCiMjIyMjIyBwcmludChmIlxyXG5FamVjdXRhciBDb21hbmRvIEFUK0hUVFBQQVJBe3BhcmFtfSIpCiMgdWFydC53cml0ZShmIkFUK0hUVFBQQVJBe3BhcmFtfVxyXG4iKQojIHVhcnQud3JpdGUoZiJBVCtIVFRQQUNUSU9OPTBcclxuIikKIyB1YXJ0LndyaXRlKCJBVCtIVFRQSEVBRFxyXG4iKQojIHVhcnQud3JpdGUoZiJBVCtIVFRQUkVBRD0wLDIwMjRcclxuIikKIyB1YXJ0LndyaXRlKCJBVCtIVFRQVEVSTVxyXG4iKQoKIyB1YXJ0LnJlYWQoKQ=="}, {"patch": "src/libs/Sim7600Driver.py", "content": "ZnJvbSBtYWNoaW5lIGltcG9ydCBVQVJULCBQaW4KaW1wb3J0IHRpbWUKaW1wb3J0IHVhc3luY2lvCmltcG9ydCB1anNvbgoKZnJvbSBzcmMubGlicy5UaW1lb3V0T2JqZWN0IGltcG9ydCBUaW1lb3V0T2JqZWN0CmZyb20gc3JjLmxpYnMuVXRpbCBpbXBvcnQgU3BsaXRTdHJpbmcsIEdldERlY2ltYWxEZWdGcm9tR3BzRm9ybWF0CiMgZnJvbSBkZWNpbWFsIGltcG9ydCBEZWNpbWFsCgpkZWJ1ZyA9IEZhbHNlCgoKY2xhc3MgU2ltNzYwMERpcnZlcjoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzZXJpYWw6IGludCwgYmF1ZDogaW50KSAtPiBOb25lOgogICAgICAgIHNlbGYuX19zZXJpYWwgPSBVQVJUKHNlcmlhbCkKICAgICAgICAjIHNlbGYuX19zZXJpYWwgPSBVQVJUKDEsIGJhdWRyYXRlPTk2MDAsIHR4PVBpbih0eHBpbiksIHJ4PVBpbihyeHBpbikpCiAgICAgICAgc2VsZi5fX3NlcmlhbC5pbml0KGJhdWRyYXRlPWJhdWQsIHJ4YnVmPTEwMjQsIHRpbWVvdXQ9MTAsIHRpbWVvdXRfY2hhcj01KQogICAgICAgIHNlbGYudGltZV91dGMgPSAwCiAgICAgICAgc2VsZi5sYXQgPSAwCiAgICAgICAgc2VsZi5sb24gPSAwCiAgICAgICAgc2VsZi5hbHQgPSAwCiAgICAgICAgIyBzZWxmLl9fc2VyaWFsLmluaXQoYml0cz04LCBwYXJpdHk9Tm9uZSwgc3RvcD0yKQoKICAgIGFzeW5jIGRlZiByZXNldF9tb2R1bGUoc2VsZik6CiAgICAgICAgc2VsZi5fX3NlcmlhbC53cml0ZSgiQVQrQ1JFU0VUXHJcbiIpCiAgICAgICAgdGltZS5zbGVlcCgwLjUpCiAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgIHByaW50KCJSZXNwdWVzdGEgZGVsIHJlc2V0OiAiKQogICAgICAgICAgICBwcmludChzZWxmLl9fc2VyaWFsLnJlYWQoKSkKCiAgICBhc3luYyBkZWYgc3RhcnRfZ3BzKHNlbGYpOgogICAgICAgIHNlbGYuX19zZXJpYWwud3JpdGUoIkFUK0NHUFM9MVxyXG4iKQogICAgICAgIHRpbWUuc2xlZXAoMC41KQogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludCgiSW5pdCBHcHMiKQogICAgICAgICAgICBwcmludChzZWxmLl9fc2VyaWFsLnJlYWQoKSkKCiAgICAgICAgc2VsZi5fX3NlcmlhbC53cml0ZSgiQVQrQ0dQU0FVVE89MVxyXG4iKQoKICAgICAgICB0aW1lLnNsZWVwKDAuNSkKCiAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgIHByaW50KHNlbGYuX19zZXJpYWwucmVhZCgpKQogICAgICAgICMgc2VsZi5fX3NlcmlhbC53cml0ZSgiQVQrQ0dQU05NRUE9MVxyXG4iKQoKICAgIGFzeW5jIGRlZiB1cGRhdGVfZ3BzKHNlbGYpOgogICAgICAgIHByaW50KCJVcGRhdGUgR3BzIikKICAgICAgICBzZWxmLl9fc2VyaWFsLndyaXRlKCJBVCtDR1BTSU5GT1xyXG4iKQogICAgICAgIHRpbWUuc2xlZXAoMC41KQogICAgICAgIGRhdGEgPSBzZWxmLl9fc2VyaWFsLnJlYWQoKS5kZWNvZGUoInV0Zi04IikKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoZGF0YSkKCiAgICAgICAgaWYgZGF0YS5maW5kKCJPS1xyXG4iKSA+IDA6CiAgICAgICAgICAgICMgQVQrQ0dQU0lORk9cclxyXG4rQ0dQU0lORk86IDM0MTAuMzExODU4LFMsMDcwNDQuMDU0MDc5LFcsMjgxMjIzLDE0MzQ0Mi4wLDUxNS44LDAuMCxcclxuXHJcbk9LXHJcbgoKICAgICAgICAgICAgbGF0ID0gU3BsaXRTdHJpbmcoZGF0YSwgMSwgIjoiLCAiLCIpWzE6XQoKICAgICAgICAgICAgaGVtX3YgPSBTcGxpdFN0cmluZyhkYXRhLCAxLCAiLCIpCgogICAgICAgICAgICBzZWxmLmxhdCA9IEdldERlY2ltYWxEZWdGcm9tR3BzRm9ybWF0KGxhdCwgaGVtX3YpCgogICAgICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgICAgIHByaW50KHNlbGYubGF0KQogICAgICAgICAgICAgICAgcHJpbnQoaGVtX3YpCgogICAgICAgICAgICBsb24gPSBTcGxpdFN0cmluZyhkYXRhLCAyLCAiLCIpCgogICAgICAgICAgICBoZW1faCA9IFNwbGl0U3RyaW5nKGRhdGEsIDMsICIsIikKCiAgICAgICAgICAgIHNlbGYubG9uID0gR2V0RGVjaW1hbERlZ0Zyb21HcHNGb3JtYXQobG9uLCBoZW1faCkKCiAgICAgICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICAgICAgcHJpbnQoc2VsZi5sb24pCiAgICAgICAgICAgICAgICBwcmludChoZW1faCkKCiAgICAgICAgICAgIHNlbGYuYWx0ID0gU3BsaXRTdHJpbmcoZGF0YSwgNiwgIiwiKQoKICAgICAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgICAgICBwcmludChzZWxmLmFsdCkKCiAgICAgICAgICAgICMgc2VsZi5sYXQgPSBHZXREZWNpbWFsRGVnRnJvbUdwc0Zvcm1hdChzZWxmLmxhdCkKCiAgICAgICAgICAgICMgcHJpbnQoc2VsZi5sYXQpCiAgICAgICAgICAgICMgcHJpbnQoc2VsZi5sb24pCiAgICAgICAgICAgICMgcHJpbnQoc2VsZi5hbHQpCgogICAgIiIiVmVyaWZpY2Egc2kgbGEgc2ltIHRpZW5lIElQCiAgICAiIiIKCiAgICBhc3luYyBkZWYgaXNfdGhlcmVfc2ltX2lwKHNlbGYpOgogICAgICAgICMgVmVyaWZpY2FyIHNpIG5vIGhheSBJUAogICAgICAgIGlwX29rID0gYXdhaXQgc2VsZi5fc2VuZF9DR1BBRERSKCkKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoZiJpcF9vazoge2lwX29rfSIpCiAgICAgICAgaWYgbm90IGlwX29rOgogICAgICAgICAgICBhd2FpdCBzZWxmLl9zZW5kX0hUVFBURVJNKCkKICAgICAgICAgICAgYXdhaXQgc2VsZi5fc2VuZF9IVFRQSU5JVCgpCiAgICAgICAgICAgICMgVm9sdmVyIGEgdmVyaWZpY2FyIHNpIG5vIGhheSBJUAogICAgICAgICAgICBpcF9vayA9IGF3YWl0IHNlbGYuX3NlbmRfQ0dQQUREUigpCiAgICAgICAgICAgIGlmIG5vdCBpcF9vazoKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICIiIkVqZWN1dGEgbGEgY29uc3VsdGEgR0VULgogICAgU2kgZWwgc2VydmljaW8gSFRUUCBubyBlc3TDg8KhIGluaWNpYWxpemFkbywgbG8gaW5pY2lhbGl6YS4KCiAgICBBcmdzOgogICAgICAgIHVybCAoc3RyKTogVVJMIGEgY29uc3VsdGFyLgoKICAgIFJldHVybnM6CiAgICAgICAgdHVwbGVbaW50LCBzdHJdOiAoc3RhdHVzX2NvZGUsIHJlc3BvbnNlX2RhdGEpCiAgICAgICAgLSBzdGF0dXNfY29kZTogQ8ODwrNkaWdvIGRlIHJlc3B1ZXN0YSBkZSBsYSBjb25zdWx0YS4gYDBgIFNpIGhhIG9jdXJyaWRvIGFsZ8ODwrpuIGVycm9yLgogICAgICAgIC0gcmVzcG9uc2VfZGF0YTogVGV4dG8gZGUgbGEgcmVzcHVlc3RhLiBgTk9fSVBgIFNpIGVsIHNlcnZpY2lvIG5vIHRpZW5lIHVuYSBJUCBjb3JyZWN0YS4KICAgICAgICBgRVJST1JgIFNpIGhhIG9jdXJyaWRvIGFsZ8ODwrpuIGVycm9yIGVuIGxhIGVqZWN1Y2nDg8KzbiBkZSBsYSBjb25zdWx0YS4KICAgICIiIgogICAgYXN5bmMgZGVmIGh0dHBfZ2V0KHNlbGYsIHVybDogc3RyLCAgbWF4X2RhdGFfdG9fcmVhZCA9IC0xKSAtPiB0dXBsZVtpbnQsIHN0cl06CgogICAgICAgIHJlc3BvbnNlX2RhdGEgPSBzdHIoKQoKICAgICAgICAjIFZlcmlmaWNhciBzaSBubyBoYXkgSVAKICAgICAgICBpcF9vayA9IGF3YWl0IHNlbGYuX3NlbmRfQ0dQQUREUigpCiAgICAgICAgaWYgbm90IGlwX29rOgogICAgICAgICAgICBhd2FpdCBzZWxmLl9zZW5kX0hUVFBURVJNKCkKICAgICAgICAgICAgYXdhaXQgc2VsZi5fc2VuZF9IVFRQSU5JVCgpCiAgICAgICAgICAgICMgVm9sdmVyIGEgdmVyaWZpY2FyIHNpIG5vIGhheSBJUAogICAgICAgICAgICBpcF9vayA9IGF3YWl0IHNlbGYuX3NlbmRfQ0dQQUREUigpCiAgICAgICAgICAgIGlmIG5vdCBpcF9vazoKICAgICAgICAgICAgICAgIHJldHVybiAwLCAiTk9fSVAiCgogICAgICAgIGF3YWl0IHNlbGYuX3NlbmRfSFRUUFBBUkEoZic9IlVSTCIsInt1cmx9IicpCiAgICAgICAgIyBBY3Rpb24gMCBlcyBlbCBtw4PCqXRvZG8gR0VUCiAgICAgICAgcmVzdWx0LCBzdGF0dXNfY29kZSwgZGF0YV9sZW4gPSBhd2FpdCBzZWxmLl9zZW5kX0hUVFBBQ1RJT04oIjAiKQogICAgICAgIGlmIHJlc3VsdCBhbmQgZGF0YV9sZW4gPiAwOgogICAgICAgICAgICAjIFJlYWQgMCBjb3JyZXNwb25kZSBhIGxhIGxlY3R1cmEgZGUgbGEgcmVzcHVlc3RhIGRlIGxhIGFjY2nDg8KzbiBHRVQKICAgICAgICAgICAgcmVzcG9uc2VfZGF0YSA9IGF3YWl0IHNlbGYuX3NlbmRfSFRUUFJFQUQoIjAiLCBkYXRhX2xlbiwgbWF4X2RhdGFfcmVhZCA9IG1heF9kYXRhX3RvX3JlYWQpCgogICAgICAgICAgICBpZiByZXNwb25zZV9kYXRhOgogICAgICAgICAgICAgICAgIyBFeHRyYWVyIGxhIGRhdGEgZGUgbGEgcmVzcHVlc3RhIGRlbCBjb21hbmRvLgogICAgICAgICAgICAgICAgbGluZXMgPSByZXNwb25zZV9kYXRhLnNwbGl0bGluZXMoKQoKICAgICAgICAgICAgICAgIGRlbCBsaW5lc1swOjVdCiAgICAgICAgICAgICAgICBkZWwgbGluZXNbLTFdCgogICAgICAgICAgICAgICAgcmVzcG9uc2VfZGF0YSA9ICIiLmpvaW4obGluZXMpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiAwLCAiRVJST1IiCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgc3RhdHVzX2NvZGUgPiAwIGFuZCBkYXRhX2xlbiA9PSAwOiAgIyAhISEhRXN0byBlcyBudWV2byBwb3IgY2hhcmxpZQogICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1c19jb2RlLCAiIgogICAgICAgICAgICByZXR1cm4gMCwgIkVSUk9SIgoKICAgICAgICByZXR1cm4gc3RhdHVzX2NvZGUsIHN0cihyZXNwb25zZV9kYXRhKQoKICAgIGFzeW5jIGRlZiBodHRwX3Bvc3Qoc2VsZiwgdXJsOiBzdHIsIGRhdGE6IGRpY3QpIC0+IHR1cGxlW2ludCwgc3RyXToKICAgICAgICAiIiJFamVjdXRhIGxhIGNvbnN1bHRhIFBPU1QuCgogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHVybCAoc3RyKTogVVJMIGRlbCBlbmRwb2ludC4KICAgICAgICAgICAgZGF0YSAoZGljdCk6IERpY2Npb25hcmlvIGNvbiBlbCBwYXlsb2FkIGRlbCBtw4PCqXRvZG8gUE9TVC4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgdHVwbGVbaW50LCBzdHJdOiAoc3RhdHVzX2NvZGUsIHJlc3BvbnNlX2RhdGEpCiAgICAgICAgICAgIC0gc3RhdHVzX2NvZGU6IEPDg8KzZGlnbyBkZSByZXNwdWVzdGEgZGUgbGEgY29uc3VsdGEuIGAwYCBTaSBoYSBvY3VycmlkbyBhbGfDg8K6biBlcnJvci4KICAgICAgICAgICAgLSByZXNwb25zZV9kYXRhOiBUZXh0byBkZSBsYSByZXNwdWVzdGEuIGBOT19JUGAgU2kgZWwgc2VydmljaW8gbm8gdGllbmUgdW5hIElQIGNvcnJlY3RhLgogICAgICAgICAgICBgRVJST1JgIFNpIGhhIG9jdXJyaWRvIGFsZ8ODwrpuIGVycm9yIGVuIGxhIGVqZWN1Y2nDg8KzbiBkZSBsYSBjb25zdWx0YS4KICAgICAgICAiIiIKICAgICAgICByZXNwb25zZV9kYXRhID0gc3RyKCkKCiAgICAgICAgIyBWZXJpZmljYXIgc2kgbm8gaGF5IElQCiAgICAgICAgaXBfb2sgPSBhd2FpdCBzZWxmLl9zZW5kX0NHUEFERFIoKQogICAgICAgIGlmIG5vdCBpcF9vazoKICAgICAgICAgICAgYXdhaXQgc2VsZi5fc2VuZF9IVFRQVEVSTSgpCiAgICAgICAgICAgIGF3YWl0IHNlbGYuX3NlbmRfSFRUUElOSVQoKQogICAgICAgICAgICAjIFZvbHZlciBhIHZlcmlmaWNhciBzaSBubyBoYXkgSVAKICAgICAgICAgICAgaXBfb2sgPSBhd2FpdCBzZWxmLl9zZW5kX0NHUEFERFIoKQogICAgICAgICAgICBpZiBub3QgaXBfb2s6CiAgICAgICAgICAgICAgICByZXR1cm4gMCwgIk5PX0lQIgoKICAgICAgICBhd2FpdCBzZWxmLl9zZW5kX0hUVFBQQVJBKGYnPSJVUkwiLCJ7dXJsfSInKQoKICAgICAgICAjIENhcmRhciBlbCBwYXlsb2FkIGRlIGxhIHJlcXVlc3QgYWwgbW9kZW0uCiAgICAgICAgYXdhaXQgc2VsZi5fc2VuZF9IVFRQREFUQShkYXRhKQoKICAgICAgICAjIEFjdGlvbiAxIGVzIGVsIG3Dg8KpdG9kbyBQT1NUCiAgICAgICAgcmVzdWx0LCBzdGF0dXNfY29kZSwgZGF0YV9sZW4gPSBhd2FpdCBzZWxmLl9zZW5kX0hUVFBBQ1RJT04oIjEiKQogICAgICAgIGlmIHJlc3VsdCBhbmQgZGF0YV9sZW4gPiAwOgogICAgICAgICAgICAjIFJlYWQgMSBjb3JyZXNwb25kZSBhIGxhIGxlY3R1cmEgZGUgbGEgcmVzcHVlc3RhIGRlIGxhIGFjY2nDg8KzbiBQT1NUCiAgICAgICAgICAgIHJlc3BvbnNlX2RhdGEgPSBhd2FpdCBzZWxmLl9zZW5kX0hUVFBSRUFEKCIxIikKICAgICAgICAgICAgaWYgcmVzcG9uc2VfZGF0YToKICAgICAgICAgICAgICAgICMgRXh0cmFlciBsYSBkYXRhIGRlIGxhIHJlc3B1ZXN0YSBkZWwgY29tYW5kby4KICAgICAgICAgICAgICAgIGxpbmVzID0gcmVzcG9uc2VfZGF0YS5zcGxpdGxpbmVzKCkKICAgICAgICAgICAgICAgIGRlbCBsaW5lc1swOjVdCiAgICAgICAgICAgICAgICBkZWwgbGluZXNbLTFdCgogICAgICAgICAgICAgICAgcmVzcG9uc2VfZGF0YSA9ICIiLmpvaW4obGluZXMpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXR1cm4gMCwgIkVSUk9SIgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiAwLCAiRVJST1IiCgogICAgICAgIHJldHVybiBzdGF0dXNfY29kZSwgc3RyKHJlc3BvbnNlX2RhdGEpCgogICAgYXN5bmMgZGVmIF9zZW5kX0hUVFBJTklUKHNlbGYsIHRpbWVfb3V0X21zOiBpbnQgPSA0MDAwKSAtPiBib29sOgogICAgICAgICIiIkluaWNpYWxpemFyIGVsIHNlcnZpY2lvIEhUVFAoUykuCgogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHRpbWVfb3V0X21zIChpbnQsIG9wdGlvbmFsKTogVGltZW91dCBlbiBtcyBwYXJhIGxhIHJlc3B1ZXN0YSBkZWwgY29tYW5kby4gRGVmYXVsdHMgdG8gNDAwMC4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgYm9vbDogYFRydWVgIHNpIGVsIGNvbWFuZG8gcmVzcG9uZGUgT0suIGBGYXNsZWAgc2kgZWwgY29tYW5kbyByZXNwb25kZSBFUlJPUi4KICAgICAgICAiIiIKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoIlxyXG5FamVjdXRhciBDb21hbmRvIEFUK0hUVFBJTklUIikKICAgICAgICAjIFZhY2llciBlbCBidWZmZXIgZGUgbGVjdHVyYS4KICAgICAgICB3aGlsZSBzZWxmLl9fc2VyaWFsLnJlYWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcGFzcwogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludCgiUHVlcnRvIHNlcmllIGxpbXBpbyIpCiAgICAgICAgc2VsZi5fX3NlcmlhbC53cml0ZSgiQVQrSFRUUElOSVRcclxuIikKCiAgICAgICAgIyBDcmVhciB1biB0aW1lb3V0IHBhcmEgbGEgbGVjdHVyYSBkZSBsYSByZXNwdWVzdGEgZGVsIGNvbWFuZG8uCiAgICAgICAgdGltZW91dCA9IFRpbWVvdXRPYmplY3QodGltZV9vdXRfbXMpCiAgICAgICAgcmVhZGVkID0gYnl0ZXMoKQogICAgICAgIHJlc3VsdCA9IEZhbHNlCiAgICAgICAgd2hpbGUgbm90IHRpbWVvdXQuZXZhbCgpOgogICAgICAgICAgICByZXMgPSBzZWxmLl9fc2VyaWFsLnJlYWQoKQogICAgICAgICAgICBpZiByZXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICByZWFkZWQgKz0gcmVzCiAgICAgICAgICAgICAgICBpZiBiIk9LIiBpbiByZWFkZWQ6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIGIiRVJST1IiIGluIHJlYWRlZDoKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGF3YWl0IHVhc3luY2lvLnNsZWVwX21zKDIwKQogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludCgiUmVzcHVlc3RhIENvbWFuZG86IiwgcmVhZGVkLCAiXHJcbiIpCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIGFzeW5jIGRlZiBfc2VuZF9IVFRQUEFSQShzZWxmLCBwYXJhbTogc3RyLCB0aW1lX291dF9tczogaW50ID0gNDAwMCkgLT4gYm9vbDoKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoZiJcclxuRWplY3V0YXIgQ29tYW5kbyBBVCtIVFRQUEFSQXtwYXJhbX0iKQogICAgICAgICMgVmFjaWVyIGVsIGJ1ZmZlciBkZSBsZWN0dXJhLgogICAgICAgIHdoaWxlIHNlbGYuX19zZXJpYWwucmVhZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwYXNzCiAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgIHByaW50KCJQdWVydG8gc2VyaWUgbGltcGlvIikKICAgICAgICBzZWxmLl9fc2VyaWFsLndyaXRlKGYiQVQrSFRUUFBBUkF7cGFyYW19XHJcbiIpCgogICAgICAgICMgQ3JlYXIgdW4gdGltZW91dCBwYXJhIGxhIGxlY3R1cmEgZGUgbGEgcmVzcHVlc3RhIGRlbCBjb21hbmRvLgogICAgICAgIHRpbWVvdXQgPSBUaW1lb3V0T2JqZWN0KHRpbWVfb3V0X21zKQogICAgICAgIHJlYWRlZCA9IGJ5dGVzKCkKICAgICAgICByZXN1bHQgPSBGYWxzZQogICAgICAgIHdoaWxlIG5vdCB0aW1lb3V0LmV2YWwoKToKICAgICAgICAgICAgcmVzID0gc2VsZi5fX3NlcmlhbC5yZWFkKCkKICAgICAgICAgICAgaWYgcmVzIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcmVhZGVkICs9IHJlcwogICAgICAgICAgICAgICAgaWYgYiJPSyIgaW4gcmVhZGVkOgogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFRydWUKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiBiIkVSUk9SIiBpbiByZWFkZWQ6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBhd2FpdCB1YXN5bmNpby5zbGVlcF9tcygyMCkKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoIlJlc3B1ZXN0YSBDb21hbmRvOiIsIHJlYWRlZCwgIlxyXG4iKQogICAgICAgIHJldHVybiByZXN1bHQKCiAgICBhc3luYyBkZWYgX3NlbmRfSFRUUERBVEEoc2VsZiwgZGF0YTogZGljdCkgLT4gYm9vbDoKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoZiJcclxuRWplY3V0YXIgQ29tYW5kbyBBVCtIVFRQREFUQSIpCiAgICAgICAgIyBWYWNpZXIgZWwgYnVmZmVyIGRlIGxlY3R1cmEuCiAgICAgICAgd2hpbGUgc2VsZi5fX3NlcmlhbC5yZWFkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoIlB1ZXJ0byBzZXJpZSBsaW1waW8iKQoKICAgICAgICBqc29uX3N0ciA9IHVqc29uLmR1bXBzKGRhdGEpCiAgICAgICAgZGF0YV9sZW4gPSBsZW4oanNvbl9zdHIpCgogICAgICAgIHNlbGYuX19zZXJpYWwud3JpdGUoZiJBVCtIVFRQREFUQT17ZGF0YV9sZW59LDEwMDBcclxuIikKICAgICAgICBhd2FpdCB1YXN5bmNpby5zbGVlcF9tcygyMCkKICAgICAgICBzZWxmLl9fc2VyaWFsLnJlYWRsaW5lKCkgICMgRXN0YSBsw4PCrW5lYSBlcyBlbCBlY28sIHNlIGRlc2NhcnRhLgogICAgICAgIHJlcyA9IHNlbGYuX19zZXJpYWwucmVhZGxpbmUoKQogICAgICAgIGlmIHJlczoKICAgICAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgICAgICBwcmludCgiUmVzcHVlc3RhIGRlbCBjb21hbmRvOiIsIHJlcykKICAgICAgICAgICAgaWYgYiJET1dOTE9BRCIgaW4gcmVzOgogICAgICAgICAgICAgICAgIyBFbnZpYXIgbGEgZGF0YSBhbCBNb2RlbS4KICAgICAgICAgICAgICAgIHNlbGYuX19zZXJpYWwud3JpdGUoanNvbl9zdHIpCiAgICAgICAgICAgICAgICBhd2FpdCB1YXN5bmNpby5zbGVlcF9tcygyMCkKICAgICAgICAgICAgICAgIHNlbGYuX19zZXJpYWwucmVhZGxpbmUoKSAgIyBFc3RhIGzDg8KtbmVhIGVzIGVsIGVjbywgc2UgZGVzY2FydGEuCiAgICAgICAgICAgICAgICByZXMgPSBzZWxmLl9fc2VyaWFsLnJlYWRsaW5lKCkKICAgICAgICAgICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJSZWFkIFBheWxvYWQgU3RhdHVzOiIsIHJlcykKICAgICAgICAgICAgICAgIGlmIHJlcyBhbmQgYiJPSyIgaW4gcmVzOgogICAgICAgICAgICAgICAgICAgICMgRWwgbW9kZW0gYWNlcHTDg8KzIGxhIGRhdGEuCiAgICAgICAgICAgICAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJEYXRhIHBheWxvYWQgYWNlcHRhZGEgT0siKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgIHByaW50KCJFbCBNb2RlbSBubyBoYSByZXNwb25kaWRvLiAocmV0dXJuIEZhbHNlKSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgYXN5bmMgZGVmIF9zZW5kX0hUVFBBQ1RJT04oc2VsZiwgbWV0aG9kOiBzdHIsIHRpbWVfb3V0X21zOiBpbnQgPSA0MDAwKSAtPiB0dXBsZVtib29sLCBpbnQsIGludF06CiAgICAgICAgIiIiRWplY3V0YSBsYSBhY2Npw4PCs24gSFRUUChTKSAoR0VULCBQT1NULCBIRUFELCBERUxFVEUpLCB5IHJldG9ybmEgZWwgcmVzdWx0YWRvLCBzdGF0dXMgeSBkYXRhIGxlbi4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgbWV0aG9kIChzdHIpOiAiMSIgcGFyYSBHRVQuICIyIiBwYXJhIFBPU1QuICIzIiBwYXJhIEhFQUQuICI0IiBwYXJhIERFTEVURS4KICAgICAgICAgICAgdGltZV9vdXRfbXMgKGludCwgb3B0aW9uYWwpOiBUaW1lb3V0IGVuIG1zIHBhcmEgbGEgcmVzcHVlc3RhIGRlbCBjb21hbmRvLiBEZWZhdWx0cyB0byA0MDAwLgoKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICB0dXBsZVtib29sLCBpbnQsIGludF06IChyZXN1bHQsIHN0YXR1c19jb2RlLCBkYXRhX2xlbikKICAgICAgICAgICAgLSByZXN1bHQ6IGBUcnVlYCBzaSBsYSBhY2Npw4PCs24gc2UgcmVhbGl6w4PCsyBjb3JyZWN0YW1lbnRlLiBgRmFsc2VgIGVuIGNhc28gY29udHJhcmlvLgogICAgICAgICAgICAtIHN0YXR1c19jb2RlOiBDw4PCs2RpZ28gSFRUUCBkZSByZXNwdWVzdGEuCiAgICAgICAgICAgIC0gZGF0YV9sZW46IENhbnRpZGFkIGRlIGJ5dGVzIHF1ZSBzZSBwdWVkZW4gbGVlciBkZSBsYSByZXNwdWVzdGEuCiAgICAgICAgIiIiCiAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgIHByaW50KGYiXHJcbkVqZWN1dGFyIENvbWFuZG8gQVQrSFRUUEFDVElPTj17bWV0aG9kfSIpCiAgICAgICAgIyBWYWNpZXIgZWwgYnVmZmVyIGRlIGxlY3R1cmEuCiAgICAgICAgd2hpbGUgc2VsZi5fX3NlcmlhbC5yZWFkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoIlB1ZXJ0byBzZXJpZSBsaW1waW8iKQogICAgICAgIHNlbGYuX19zZXJpYWwud3JpdGUoZiJBVCtIVFRQQUNUSU9OPXttZXRob2R9XHJcbiIpCgogICAgICAgICMgQ3JlYXIgdW4gdGltZW91dCBwYXJhIGxhIGxlY3R1cmEgZGUgbGEgcmVzcHVlc3RhIGRlbCBjb21hbmRvLgogICAgICAgIHRpbWVvdXQgPSBUaW1lb3V0T2JqZWN0KHRpbWVfb3V0X21zKQogICAgICAgIHJlYWRlZCA9IGJ5dGVzKCkKICAgICAgICByZXN1bHQgPSBGYWxzZQogICAgICAgIHN0YXR1c19jb2RlID0gMAogICAgICAgIGRhdGFfbGVuID0gMAogICAgICAgIHdoaWxlIG5vdCB0aW1lb3V0LmV2YWwoKToKICAgICAgICAgICAgcmVzID0gc2VsZi5fX3NlcmlhbC5yZWFkKCkKICAgICAgICAgICAgaWYgcmVzIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcmVhZGVkICs9IHJlcwogICAgICAgICAgICAgICAgaWYgYiIrSFRUUEFDVElPTjoiIGluIHJlYWRlZDoKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgIyBFeHRyYWVyIGVsIHN0YXR1c19jb2RlIHkgZWwgZGF0YV9sZW4uCiAgICAgICAgICAgICAgICAgICAgbGluZSA9IFtpdGVtIGZvciBpdGVtIGluIHJlYWRlZC5zcGxpdGxpbmVzKCkgaWYgYiIrSFRUUEFDVElPTjoiIGluIGl0ZW1dCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKGxpbmUpID49IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzID0gbGluZVswXS5zcGxpdChiIiwiKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oZWxlbWVudHMpID49IDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfY29kZSA9IGludChlbGVtZW50c1sxXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfbGVuID0gaW50KGVsZW1lbnRzWzJdKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIGIiRVJST1IiIGluIHJlYWRlZDoKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGF3YWl0IHVhc3luY2lvLnNsZWVwX21zKDIwKQogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludCgiUmVzcHVlc3RhIENvbWFuZG86IiwgcmVhZGVkKQogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludCgiUmVzdWx0OiIsIHJlc3VsdCwgIiwgU3RhdHVzIENvZGU6Iiwgc3RhdHVzX2NvZGUsICIsIERhdGEgTGVuOiIsIGRhdGFfbGVuKQogICAgICAgIHJldHVybiByZXN1bHQsIHN0YXR1c19jb2RlLCBkYXRhX2xlbgoKICAgIGFzeW5jIGRlZiBfc2VuZF9IVFRQUkVBRChzZWxmLCBtZXRob2Q6IHN0ciwgZGF0YV9sZW4gPSAxMDI0LCAgbWF4X2RhdGFfcmVhZCA9IC0xLHRpbWVfb3V0X21zOiBpbnQgPSA0MDAwKSAtPiBzdHIgfCBOb25lOgogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludChmIlxyXG5FamVjdXRhciBDb21hbmRvIEFUK0hUVFBSRUFEPXttZXRob2R9LHtkYXRhX2xlbn0iKQogICAgICAgICMgVmFjaWVyIGVsIGJ1ZmZlciBkZSBsZWN0dXJhLgogICAgICAgIHdoaWxlIHNlbGYuX19zZXJpYWwucmVhZCgpIGlzIG5vdCBOb25lOgogICAgICAgICAgICBwYXNzCiAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgIHByaW50KCJQdWVydG8gc2VyaWUgbGltcGlvIikKCiAgICAgICAgaWYgbWF4X2RhdGFfcmVhZCA+IDA6CiAgICAgICAgICAgIHNlbGYuX19zZXJpYWwud3JpdGUoZiJBVCtIVFRQUkVBRD17bWV0aG9kfSx7bWF4X2RhdGFfcmVhZH1cclxuIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLl9fc2VyaWFsLndyaXRlKGYiQVQrSFRUUFJFQUQ9e21ldGhvZH0se2RhdGFfbGVufVxyXG4iKQoKICAgICAgICAjIENyZWFyIHVuIHRpbWVvdXQgcGFyYSBsYSBsZWN0dXJhIGRlIGxhIHJlc3B1ZXN0YSBkZWwgY29tYW5kby4KICAgICAgICB0aW1lb3V0ID0gVGltZW91dE9iamVjdCh0aW1lX291dF9tcykKICAgICAgICByZWFkZWQgPSBieXRlcygpCiAgICAgICAgcmVzdWx0ID0gRmFsc2UKICAgICAgICB3aGlsZSBub3QgdGltZW91dC5ldmFsKCk6CiAgICAgICAgICAgIHJlcyA9IHNlbGYuX19zZXJpYWwucmVhZCgpCiAgICAgICAgICAgIGlmIHJlcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHJlYWRlZCArPSByZXMKICAgICAgICAgICAgICAgICNwcmludChyZWFkZWQpCiAgICAgICAgICAgICAgICBpZiBiIitIVFRQUkVBRDogMCIgaW4gcmVhZGVkOgogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFRydWUKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiBiIkVSUk9SIiBpbiByZWFkZWQ6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBhd2FpdCB1YXN5bmNpby5zbGVlcF9tcygyMCkKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoIlJlc3B1ZXN0YSBDb21hbmRvOiIsIHJlYWRlZCwgIlxyXG4iKQoKICAgICAgICBuMSA9IDAKCiAgICAgICAgc2l6ZSA9IGxlbihyZWFkZWQpCgogICAgICAgIHdoaWxlIG4xID49IDA6IAogICAgICAgICAgICBuMSA9IHJlYWRlZC5maW5kKGInK0hUVFBSRUFEOiBEQVRBJykgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbjEgPj0gMDoKICAgICAgICAgICAgICAgIG4yID0gcmVhZGVkLmZpbmQoYidccicsIG4xKSAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgcmVhZGVkID0gcmVhZGVkWzA6bjFdICsgcmVhZGVkW24yOnNpemVdCiAgICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHJlYWRlZC5kZWNvZGUoInV0Zi04IikgaWYgcmVzdWx0IGVsc2UgTm9uZQoKICAgIGFzeW5jIGRlZiBfc2VuZF9IVFRQVEVSTShzZWxmLCB0aW1lX291dF9tczogaW50ID0gNDAwMCkgLT4gYm9vbDoKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoIlxyXG5FamVjdXRhciBDb21hbmRvIEFUK0hUVFBURVJNIikKICAgICAgICAjIFZhY2llciBlbCBidWZmZXIgZGUgbGVjdHVyYS4KICAgICAgICB3aGlsZSBzZWxmLl9fc2VyaWFsLnJlYWQoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcGFzcwogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludCgiUHVlcnRvIHNlcmllIGxpbXBpbyIpCiAgICAgICAgc2VsZi5fX3NlcmlhbC53cml0ZSgiQVQrSFRUUFRFUk1cclxuIikKCiAgICAgICAgIyBDcmVhciB1biB0aW1lb3V0IHBhcmEgbGEgbGVjdHVyYSBkZSBsYSByZXNwdWVzdGEgZGVsIGNvbWFuZG8uCiAgICAgICAgdGltZW91dCA9IFRpbWVvdXRPYmplY3QodGltZV9vdXRfbXMpCiAgICAgICAgcmVhZGVkID0gYnl0ZXMoKQogICAgICAgIHJlc3VsdCA9IEZhbHNlCiAgICAgICAgd2hpbGUgbm90IHRpbWVvdXQuZXZhbCgpOgogICAgICAgICAgICByZXMgPSBzZWxmLl9fc2VyaWFsLnJlYWQoKQogICAgICAgICAgICBpZiByZXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICByZWFkZWQgKz0gcmVzCiAgICAgICAgICAgICAgICBpZiBiIk9LIiBpbiByZWFkZWQ6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIGIiRVJST1IiIGluIHJlYWRlZDoKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBGYWxzZQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGF3YWl0IHVhc3luY2lvLnNsZWVwX21zKDIwKQogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludCgiUmVzcHVlc3RhIENvbWFuZG86IiwgcmVhZGVkLCAiXHJcbiIpCiAgICAgICAgYXdhaXQgdWFzeW5jaW8uc2xlZXBfbXMoMTAwMCkKICAgICAgICByZXR1cm4gcmVzdWx0CgogICAgYXN5bmMgZGVmIF9zZW5kX0NHUEFERFIoc2VsZiwgdGltZV9vdXRfbXM6IGludCA9IDQwMDApIC0+IGJvb2w6CiAgICAgICAgIiIiVmVyaWZpY2FyIHNpIGVsIE1vZGVtIHRpZW5lIHVuYSBkaXJlY2Npw4PCs24gSVAgdsODwqFsaWRhIGFzaWduYWRhLgoKICAgICAgICBBcmdzOgogICAgICAgICAgICB0aW1lX291dF9tcyAoaW50LCBvcHRpb25hbCk6IFRpbWVvdXQgZW4gbXMgcGFyYSBsYSByZXNwdWVzdGEgZGVsIGNvbWFuZG8uIERlZmF1bHRzIHRvIDQwMDAuCgogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIGJvb2w6IGBUcnVlYCBzaSBsYSBkaXJlY2Npb24gSVAgZXMgdsODwqFsaWRhIHkgZGlmZXJlbnRlIGRlIDAuMC4wLjAgLSBgRmFsc2VgIGVuIGNhc28gY29udHJhcmlvLgogICAgICAgICIiIgogICAgICAgIGlmIGRlYnVnOgogICAgICAgICAgICBwcmludCgiXHJcbkVqZWN1dGFyIENvbWFuZG8gQVQrQ0dQQUREUiIpCiAgICAgICAgIyBWYWNpZXIgZWwgYnVmZmVyIGRlIGxlY3R1cmEuCiAgICAgICAgd2hpbGUgc2VsZi5fX3NlcmlhbC5yZWFkKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBpZiBkZWJ1ZzoKICAgICAgICAgICAgcHJpbnQoIlB1ZXJ0byBzZXJpZSBsaW1waW8iKQogICAgICAgIHNlbGYuX19zZXJpYWwud3JpdGUoIkFUK0NHUEFERFJcclxuIikKCiAgICAgICAgIyBFamVtcGxvIGRlIHJlc3B1ZXN0YSBkZSBlc3RlIGNvbWFuZG86ICdBVCtDR1BBRERSXHJcclxuK0NHUEFERFI6IDEsMC4wLjAuMFxyXG5cclxuT0tcclxuJwogICAgICAgICMgQ3JlYXIgdW4gdGltZW91dCBwYXJhIGxhIGxlY3R1cmEgZGUgbGEgcmVzcHVlc3RhIGRlbCBjb21hbmRvLgogICAgICAgIHRpbWVvdXQgPSBUaW1lb3V0T2JqZWN0KHRpbWVfb3V0X21zKQogICAgICAgIHJlYWRlZCA9IGJ5dGVzKCkKICAgICAgICByZXN1bHQgPSBGYWxzZQogICAgICAgIHdoaWxlIG5vdCB0aW1lb3V0LmV2YWwoKToKICAgICAgICAgICAgcmVzID0gc2VsZi5fX3NlcmlhbC5yZWFkKCkKICAgICAgICAgICAgaWYgcmVzIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcmVhZGVkICs9IHJlcwogICAgICAgICAgICAgICAgaWYgYiIrQ0dQQUREUjoiIGluIHJlYWRlZDoKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsaWYgYiJFUlJPUiIgaW4gcmVhZGVkOgogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEZhbHNlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgYXdhaXQgdWFzeW5jaW8uc2xlZXBfbXMoMjApCiAgICAgICAgaWYgZGVidWc6CiAgICAgICAgICAgIHByaW50KCJSZXNwdWVzdGEgQ29tYW5kbzoiLCByZWFkZWQsICJcclxuIikKICAgICAgICBpZiByZXN1bHQ6CiAgICAgICAgICAgICMgVmVyaWRpY2FyIHNpIGV4aXN0ZSB1bmEgSVAgZGlmZXJlbnRlIGRlIDAuMC4wLjAKICAgICAgICAgICAgbGluZXMgPSByZWFkZWQuc3BsaXRsaW5lcygpCiAgICAgICAgICAgIGZvciBsaW5lIGluIGxpbmVzOgogICAgICAgICAgICAgICAgIyBCdXNjYXIgbGEgaXAgc29sbyBlbiBsYXMgbGluZWFzIGRlIHJlc3B1ZXN0YSBkZWwgY29tYW5kbywgbm8gZW4gb3RyYXMuCiAgICAgICAgICAgICAgICBpZiBiIitDR1BBRERSOiIgaW4gbGluZToKICAgICAgICAgICAgICAgICAgICBlbGVtZW50cyA9IGxpbmUuc3BsaXQoYiIsIikKICAgICAgICAgICAgICAgICAgICByZXMgPSBzZWxmLl9faXNfdmFsaWRfaXB2NChlbGVtZW50c1stMV0pCiAgICAgICAgICAgICAgICAgICAgaWYgcmVzOgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfX2lzX3ZhbGlkX2lwdjQoc2VsZiwgaXBfYnl0ZXM6IGJ5dGVzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlwX3N0ciA9IGlwX2J5dGVzLmRlY29kZSgidXRmLTgiKQogICAgICAgIGV4Y2VwdCBVbmljb2RlRGVjb2RlRXJyb3I6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICBpZiBpcF9zdHIgPT0gIjAuMC4wLjAiOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgb2N0ZXRzID0gaXBfc3RyLnNwbGl0KCIuIikKICAgICAgICBpZiBsZW4ob2N0ZXRzKSAhPSA0OgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgZm9yIG9jdGV0IGluIG9jdGV0czoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbnVtID0gaW50KG9jdGV0KQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQoKICAgICAgICAgICAgaWYgbnVtIDwgMCBvciBudW0gPiAyNTU6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgcmV0dXJuIFRydWUK"}, {"patch": "src/libs/TimeoutObject.py", "content": "aW1wb3J0IHV0aW1lCgoKY2xhc3MgVGltZW91dE9iamVjdDoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB0aW1lb3V0X21zOiBpbnQpOgogICAgICAgIHNlbGYuX19zdGFydF90aW1lID0gdXRpbWUudGlja3NfbXMoKQogICAgICAgIHNlbGYuX190aW1lb3V0X21zID0gdGltZW91dF9tcwoKICAgIGRlZiBldmFsKHNlbGYpIC0+IGJvb2w6CiAgICAgICAgY3VycmVudF90aW1lID0gdXRpbWUudGlja3NfbXMoKQogICAgICAgIGVsYXBzZWRfdGltZSA9IHV0aW1lLnRpY2tzX2RpZmYoY3VycmVudF90aW1lLCBzZWxmLl9fc3RhcnRfdGltZSkKCiAgICAgICAgaWYgZWxhcHNlZF90aW1lID49IHNlbGYuX190aW1lb3V0X21zOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQo="}, {"patch": "src/libs/Util.py", "content": ""}]}